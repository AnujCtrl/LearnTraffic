version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: traffic_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: traffic_db
      POSTGRES_USER: traffic_user
      POSTGRES_PASSWORD: traffic_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - traffic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traffic_user -d traffic_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:6.2-alpine
    container_name: traffic_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - traffic_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NestJS Application (commented out for local development)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: traffic_app
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     NODE_ENV: development
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_NAME: traffic_db
  #     DB_USER: traffic_user
  #     DB_PASSWORD: traffic_password
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - traffic_network
  #   volumes:
  #     - .:/app
  #     - /app/node_modules

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  traffic_network:
    driver: bridge